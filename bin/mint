#!/usr/bin/env ruby

# Add /lib to path to override any local installations of Mint
$LOAD_PATH.unshift File.expand_path('../lib', __dir__)

require "mint"
require "shellwords"

argv, commandline_options, help = 
  Mint::CommandLine.parse(ARGV).values_at(:argv, :options, :help)

original_command = argv.first
case (argv.shift || "help").downcase.to_sym
when :publish
  # Aruba chokes here, so we use this hack to convince Mint we're
  # not in a pipeline
  files = 
    if $stdin.tty? || ENV["MINT_NO_PIPE"]
      argv
    else
      $stdin.each_line.reduce [] do |list, line|
        list.concat(Shellwords.split(line))
      end
    end
  Mint::CommandLine.publish!(files, commandline_options)
when :preview
  # Preview mode uses live CSS links instead of inline styles
  Mint.rendering_mode = :preview
  files = 
    if $stdin.tty? || ENV["MINT_NO_PIPE"]
      argv
    else
      $stdin.each_line.reduce [] do |list, line|
        list.concat(Shellwords.split(line))
      end
    end
  Mint::CommandLine.publish!(files, commandline_options)
when :help
  Mint::CommandLine.help(help)
when :install
  file = argv.shift
  name = argv.shift
  scope = commandline_options[:scope] || :local
  Mint::CommandLine.install(file, name, scope)
when :uninstall
  name = argv.shift
  scope = commandline_options[:scope] || :local
  Mint::CommandLine.uninstall(name, scope)
when :templates
  filter = argv.shift
  scope = commandline_options[:scope] || :local
  Mint::CommandLine.templates(filter, scope)
when :"edit-layout"
  name = argv.shift
  scope = commandline_options[:scope] || :local
  Mint::CommandLine.edit(name, :layout, scope)
when :"edit-style" 
  name = argv.shift
  scope = commandline_options[:scope] || :local
  Mint::CommandLine.edit(name, :style, scope)
when :set
  key = argv.shift
  value = argv.shift
  scope = commandline_options[:scope] || :local
  Mint::CommandLine.set(key, value, scope)
when :config
  Mint::CommandLine.config
else
  # If no commands were found, search the PATH for commands prefixed
  # with mint-. If no matching executables are found, we know we've
  # been passed a set of documents, so parse the commandline options, 
  # merge them with the config options, and start minting the 
  # document list.
  
  begin
    if File.executable? "mint-#{original_command}"
      system "mint-#{original_command} #{argv[1..-1].join ' '}"
    else
      $stderr.puts "Error: Unknown command '#{original_command}'"
      Mint::CommandLine.help(help)
      exit 1
    end
  rescue
    Mint::CommandLine.help(help)
    exit 1
  end
end
